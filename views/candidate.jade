extends layout

block content
	div.row
		div.col-xs-12
			div.candidate-info
				if (candidateInfo.Phone)
					span Phone: #{candidateInfo.Phone}
					br
				if (candidateInfo.Email)  
					span Email: #{candidateInfo.Email}
					br
				if (candidateInfo.Website)
					span 
						a(href="#{candidateInfo.Website}", target="_blank") Website 
				if (candidateInfo.Facebook)
					span | 
						a(href="#{candidateInfo.Facebook}", target="_blank") Facebook 
				if (candidateInfo.Twitter_Handle)
					span | 
						a(href="#{candidateInfo.Twitter_Handle}", target="_blank") Twitter
	div.candidate-tabs
		if (locals.hasFinancialCommittee.length > 0)
			ul.nav.nav-tabs
				li.active
					a(data-toggle="tab", href="#races") Races		
				li
					a(data-toggle="tab", href="#contributions") Contributions
		else
			ul.nav.nav-tabs
				li.active
					a(data-toggle="tab", href="#races") Races
		if (locals.hasFinancialCommittee.length> 0)			
			div.row
				div.tab-content
					div#races.tab-pane.fade.in.active		
						- if(locals.mayorRaceInfo.length > 0)
						each race, i in mayorRaceInfo
							div.col-xs-4
								div.race-panel
									p.title #{mayorRaceInfo[i].City} 
										span.title #{mayorRaceInfo[i].Seat}
									p.date #{mayorRaceInfo[i].Date}
									if(mayorRaceInfo[i].FPTP_Votes_Total)
										p Total Votes:
										span #{mayorRaceInfo[i].FPTP_Votes_Total}
										p Percentage of Popular Vote: 
										span.number #{mayorRaceInfo[i].FPTP_Votes_Percentage}
									else
										span Total First Place Votes: 
										span.number #{mayorRaceInfo[i].RC_First_Place_Votes_Total}
										br
										span Percentage First Place Vote:  
										span.number #{mayorRaceInfo[i].RC_First_Place_Votes_Percentage}
										br
										span Total Second Place Votes: 
										span.number #{mayorRaceInfo[i].RC_Second_Place_Votes_Total}
										br
										span Percentage Second Place Vote:  
										span.number #{mayorRaceInfo[i].RC_Second_Place_Votes_Percentage}
										br
										span Total Third Place Votes: 
										span.number #{mayorRaceInfo[i].RC_Third_Place_Votes_Total}
										br
										span Percentage Third Place Vote: 
										span.number #{mayorRaceInfo[i].RC_Third_Place_Votes_Percentage}								
						- if(locals.wardRaceInfo.length > 0)
						each race, i in wardRaceInfo
							div.col-xs-4
								div.race-panel
									p.title #{wardRaceInfo[i].City} 
										span.title #{wardRaceInfo[i].Seat} 
										span.title #{wardRaceInfo[i].Ward_Name}
									p.date #{wardRaceInfo[i].Date}

									if(wardRaceInfo[i].FPTP_Votes_Total)
										span Total Votes: 
										span.number #{wardRaceInfo[i].FPTP_Votes_Total}
										br
										span Percentage of Popular Vote: 
										span.number #{wardRaceInfo[i].FPTP_Votes_Percentage}
									else
										span Total First Place Votes: 
										span.number #{wardRaceInfo[i].RC_First_Place_Votes_Total}
										br
										span Percentage First Place Vote: 
										span.number #{wardRaceInfo[i].RC_First_Place_Votes_Percentage}
										br
										span Total Second Place Votes: 
										span.number #{wardRaceInfo[i].RC_Second_Place_Votes_Total}
										br
										span Percentage Second Place Vote:  
										span.number #{wardRaceInfo[i].RC_Second_Place_Votes_Percentage}
										br
										span Total Third Place Votes: 
										span.number #{wardRaceInfo[i].RC_Third_Place_Votes_Total}
										br
										span Percentage Third Place Vote:   
										span.number #{wardRaceInfo[i].RC_Third_Place_Votes_Percentage}		

					div#contributions.tab-pane.fade

			div.row
				a.goBack(href="/") Back to Map

		else
			div.row
				div.tab-content
					div#races.tab-pane.fade.in.active		
						- if(locals.mayorRaceInfo.length > 0)
						each race, i in mayorRaceInfo
							div.col-xs-4
								div.race-panel
									p.title #{mayorRaceInfo[i].City} 
										span.title #{mayorRaceInfo[i].Seat}
									p.date #{mayorRaceInfo[i].Date}
									if(mayorRaceInfo[i].FPTP_Votes_Total)
										p Total Votes:
										span #{mayorRaceInfo[i].FPTP_Votes_Total}
										p Percentage of Popular Vote: 
										span.number #{mayorRaceInfo[i].FPTP_Votes_Percentage}
									else
										span Total First Place Votes: 
										span.number #{mayorRaceInfo[i].RC_First_Place_Votes_Total}
										br
										span Percentage First Place Vote:  
										span.number #{mayorRaceInfo[i].RC_First_Place_Votes_Percentage}
										br
										span Total Second Place Votes: 
										span.number #{mayorRaceInfo[i].RC_Second_Place_Votes_Total}
										br
										span Percentage Second Place Vote:  
										span.number #{mayorRaceInfo[i].RC_Second_Place_Votes_Percentage}
										br
										span Total Third Place Votes: 
										span.number #{mayorRaceInfo[i].RC_Third_Place_Votes_Total}
										br
										span Percentage Third Place Vote: 
										span.number #{mayorRaceInfo[i].RC_Third_Place_Votes_Percentage}								
						- if(locals.wardRaceInfo.length > 0)
						each race, i in wardRaceInfo
							div.col-xs-4
								div.race-panel
									p.title #{wardRaceInfo[i].City} 
										span.title #{wardRaceInfo[i].Seat} 
										span.title #{wardRaceInfo[i].Ward_Name}
									p.date #{wardRaceInfo[i].Date}

									if(wardRaceInfo[i].FPTP_Votes_Total)
										span Total Votes: 
										span.number #{wardRaceInfo[i].FPTP_Votes_Total}
										br
										span Percentage of Popular Vote: 
										span.number #{wardRaceInfo[i].FPTP_Votes_Percentage}
									else
										span Total First Place Votes: 
										span.number #{wardRaceInfo[i].RC_First_Place_Votes_Total}
										br
										span Percentage First Place Vote: 
										span.number #{wardRaceInfo[i].RC_First_Place_Votes_Percentage}
										br
										span Total Second Place Votes: 
										span.number #{wardRaceInfo[i].RC_Second_Place_Votes_Total}
										br
										span Percentage Second Place Vote:  
										span.number #{wardRaceInfo[i].RC_Second_Place_Votes_Percentage}
										br
										span Total Third Place Votes: 
										span.number #{wardRaceInfo[i].RC_Third_Place_Votes_Total}
										br
										span Percentage Third Place Vote:   
										span.number #{wardRaceInfo[i].RC_Third_Place_Votes_Percentage}		

					div#contributions.tab-pane.fade

			div.row
				a.goBack(href="/") Back to Map
block script
	script(type='text/javascript').
		var pathName = window.location.pathname;	
		var globalData;

		$.getJSON("/candidate/getCandidateContributions/" + pathName.split('/')[2], function(data){				
				if(!data){
					console.log("no data");
				} else {
					globalData = data;
					//if they have a committee, change the data
					if($('a[href="#contributions"]').length > 0){
						(data.contributions).forEach(function(committee){
							if(committee[0]){
								createCommitteeRow(committee);

								//add the click events for the filters here


								//make the table sortable here
								//conditional logic prevents re-instantiation
								if($.fn.dataTable.isDataTable('#donations')){
								}
								else{
									$('table#donations').DataTable({
									//default sort by most recent at the top
										"order": [[1, "desc"]],
										"bLengthChange": false,
										"searching": true
									});
								}
							}
						});	
					}

				}
		});

		function createCommitteeRow(committee){

			if(!committee[0].Termination_Date){
				committee[0].Termination_Date = 'Still Active';
			}

			var row = '<div class="col-xs-12"><div class="committee-panel"><p class="committee-title">' + (committee[0]).Committee_Name;
			var timeLine = '<div class="row"><div class="col-xs-10 col-xs-offset-1"><div class="timelineContainer" id="timelineContainer ' + (committee[0]).idCommittee +'"></div></div></div>'
			var sectorPieChart = '<div class= "row"><div class="col-xs-10 col-xs-offset-1"><div class="sectorPieChartContainer" id="sectorPieChartContainer ' + (committee[0]).idCommittee +'"></div></div></div>';
			var sectorBarChart = '<div class="row"><div class="col-xs-10 col-xs-offset-1"><div class="sectorBarChartContainer" id="sectorBarChartContainer ' + (committee[0]).idCommittee +'"></div></div></div>'
			var itemizedChart = '<div class="row"><div class="col-xs-5"><div class="itemizedChart" id="itemizedChartContainer ' + (committee[0]).idCommittee  + '"></div></div>'
			var locationChart = '<div class="col-xs-7"><div class="locationChart" id="locationChartContainer ' + (committee[0]).idCommittee  + '"></div></div></div></div>'
			var row = row + timeLine + sectorPieChart + sectorBarChart + itemizedChart + locationChart;
			createDonorTable(committee, row);
		}

		function createTimeline(committee){
			$.getJSON("/candidate/getCommitteeTimeline/" + (committee[0]).idCommittee, function(data){
				if(!data){
					console.log('error getting data');
				} else {
					var dataArray = [];
					//create the data points for the chart
					//add the data
					(data.timeline).forEach(function(timeline){
						var year = timeline.Year;
						var month = timeline.Month_Num;
						var day = 1;
						var point = {y: timeline.Amount, x: new Date(year, month, day)}
						//dynamically add the data point
						dataArray.push(point)
					});

				//create the area chart
					 var areaChart = new CanvasJS.Chart("timelineContainer " + (committee[0]).idCommittee,
						{
							title: {
								text: "Contribution Analysis",
								fontSize: 25,
								horizontalAlign: "center"
							},
							animationEnabled: true,
							axisX: {
								interval: 3
							},
							axisY: {
								title: "Dollars Donated per Month",
								fontSize: 10
							},
							data: [
								{
									type: "area",
									//legendText: "{label}",
									color: "rgba(40,175,101,0.6)",
									labelWrap: false,
									dataPoints: dataArray 
								}
							]
						});
						
						setTimeout(function(){
							areaChart.render();
						}, 1500);
						
				}

			});
		}


		function createSectorCharts(committee){
			$.getJSON("/candidate/getSectorInformation/" + (committee[0]).idCommittee, function(data){
				if(!data){
					console.log('error getting data');
				} else {
					var dataArray = [];
					var barDataArray =[];
					//create the data points for the chart
					//add the data
					(data.sector).forEach(function(sector){
						//var point = {y: sector.Total}
						var point = {y: sector.Total, label: sector.Sector}
						//dynamically add the data point
						dataArray.push(point)

						var barPoint = {x: sector.Total, label: sector.Sector}
						barDataArray.push(barPoint);
					});

					//create the base pie chart
					 var pieChart = new CanvasJS.Chart("sectorPieChartContainer " + (committee[0]).idCommittee,
						{
							title: {
								text: "Percent of Total Donations by Sector",
								fontSize: 25,
								horizontalAlign: "left"
							},
							legend: {
								//maxWidth: 650,
								//itemWidth: 400
							},
							data: [
								{
									type: "pie",
									//showInLegend: true,
									//legendText: "{label}",
									indexLabelFontSize: 15,
									dataPoints: dataArray /*[
										{ y: 4181563, indexLabel: "PlayStation 3" },
										{ y: 2175498, indexLabel: "Wii" },
										{ y: 3125844, indexLabel: "Xbox 360" },
										{ y: 1176121, indexLabel: "Nintendo DS"},
										{ y: 1727161, indexLabel: "PSP" },
										{ y: 4303364, indexLabel: "Nintendo 3DS"},
										{ y: 1717786, indexLabel: "PS Vita"}
									]*/
								}
							]
						});
					 	
					 	var barChart = new CanvasJS.Chart("sectorBarChartContainer " + (committee[0]).idCommittee,
						{
							title:{
								text: "Total Donations by Sector",
								fontSize: 25,
								horizontalAlign: "left"				

							},
							animationEnabled: true,
							axisX:{
								interval: 1,
								gridThickness: 0,
								labelFontSize: 10,
								labelFontStyle: "normal",
								labelFontWeight: "normal",
								labelFontFamily: "Lucida Sans Unicode"

							},
							axisY2:{
								interlacedColor: "rgba(1,77,101,.2)",
								gridColor: "rgba(1,77,101,.1)",
								labelFontSize: 10

							},

							data: [
							{     
								type: "bar",
				                name: "companies",
								axisYType: "secondary",
								color: "#014D65",				
								dataPoints: dataArray
							}
							
							]
						});						



					setTimeout(function(){
					pieChart.render();
					barChart.render();
					}, 2000);
				}
			});
		}

		function createItemizedChart(committee){
			$.getJSON("/candidate/getCandidateItemizedContributions/" + (committee[0]).idCommittee, function(data){
				if(!data){
					console.log('error getting data');
				} else {
					
					//create the base pie chart
					 var pieChart = new CanvasJS.Chart("itemizedChartContainer " + (committee[0]).idCommittee,
						{
							title: {
								text: "Contribution Types",
								fontSize: 25,
								horizontalAlign: "left"
							},
							legend: {
								//maxWidth: 650,
								//itemWidth: 400
							},
							data: [
								{
									type: "pie",
									//showInLegend: true,
									//legendText: "{label}",
									indexLabel: "{label}",
									indexLabelFontSize: 15,									
									dataPoints: [
										{y: (data.itemized)[0].Sum_Item, label: 'Itemized'},
										{y: (data.itemized)[0].Sum_Non, label: 'Non-Itemized'}

									] 
								}
							]
						});

					setTimeout(function(){
					pieChart.render();
					}, 2000);						
					}
			});		
		}

		function createLocationChart(committee){
			$.getJSON("/candidate/getCandidateLocationContributions/" + (committee[0]).idCommittee, function(data){
				if(!data){
					console.log('error getting data');
				} else {
					var dataArray = [];
					//create the data points for the chart
					(data.locations).forEach(function(location){
						//var point = {y: sector.Total}
						var point = {y: location.Total, label: location.City}
						//dynamically add the data point
						dataArray.push(point)
					});

					
					//create the base pie chart
					 var pieChart = new CanvasJS.Chart("locationChartContainer " + (committee[0]).idCommittee,
						{
							title: {
								text: "Donor Cities",
								fontSize: 25,
								horizontalAlign: "left"
							},
							legend: {
								//maxWidth: 650,
								//itemWidth: 400
							},
							data: [
								{
									type: "pie",
									//showInLegend: true,
									//legendText: "{label}",
									indexLabel: "{label}",
									dataPoints: dataArray,
									indexLabelFontSize: 15

									 
								}
							]
						});

					setTimeout(function(){
					pieChart.render();
					}, 2000);						
					}
			});		
		}


		function createDonorTable(committee, row){
			var addition = '<div class="row"><div class="col-xs-12"><table id="donations" class="table table-striped"><thead><tr><th>Date</th><th>First</th><th>Last</th><th>Employer</th><th>Sector</th><th>Donation</th></tr></thead><tbody>';

			committee.forEach(function(donation){

				var donationRow = '<tr><td>' + donation.Date+ '</td><td>' + donation.First + '</td><td>' + donation.Last + '</td><td>' + donation.Employer + '</td><td>' + donation.Sector +'</td><td>' + donation.Money_Received_This_Period + '</td></tr>';
				addition = addition + donationRow;
			});

			addition = addition + '</tbody></table></div>';


			row = row + addition;

			closeCommitteeRow(committee, row);
		}


		function closeCommitteeRow(committee, row){
			var addition = '<div class="col-xs-12"><div class="committee-info"><span>Registration Date: </span><span>' + (committee[0]).Registration_Date+ '</span><span>	Termination Date: </span><span>' + (committee[0]).Termination_Date+ '</span></div></div></div></div></div>'
			row = row + addition;
			$('#contributions').append(row);


			createSectorCharts(committee);
			createTimeline(committee)
			createItemizedChart(committee);
			createLocationChart(committee);

		}


