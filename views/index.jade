
extends layout

block content
	div.container
		div.row.map-holder
			div.col-xs-12
				h1.map-title Minneapolis Map
			div.col-xs-10
				div#map
				div#ward-legend
					ul
						li
							a(href='http://www.nba.com') Homepage
						li
							a(href='#') Ward History
						li
							a(href='#') Contact
						li
							span#back-to-city Back to City View
			div.col-xs-2
				div#form
					div.form-group
						label(for='sYears') Year
						select.form-control#sYears
							for year, i in years
								option.dropdown-item(value="#{years[i].idElection}") #{years[i].Year}					
					div.form-group
						label(for='sYears') Race
						select.form-control#sRaces
					div.form-group
						label(for='sCandidats') Candidates
						select.form-control#sCandidates

block script
	script(type='text/javascript').
		var allShapes = [];
		var allPrecincts = [];
		var allMarkers = [];
		var regExp = /\(([^)]+)\)/;
		var minneapolis_lat = 44.98154;
		var minneapolis_lng = -93.270718;


		//$(document).ready(function() {
			updateRaces();
			drawWards();

			var map;
			function initMap(){

				map = new google.maps.Map(document.getElementById('map'), {
					center: {lat: minneapolis_lat, lng: minneapolis_lng},
					zoom: 12,
					styles: [{"featureType":"poi","elementType":"all","stylers":[{"hue":"#000000"},{"saturation":-100},{"lightness":-100},{"visibility":"off"}]},{"featureType":"poi","elementType":"all","stylers":[{"hue":"#000000"},{"saturation":-100},{"lightness":-100},{"visibility":"off"}]},{"featureType":"administrative","elementType":"all","stylers":[{"hue":"#000000"},{"saturation":0},{"lightness":-100},{"visibility":"off"}]},{"featureType":"road","elementType":"labels","stylers":[{"hue":"#ffffff"},{"saturation":-100},{"lightness":100},{"visibility":"off"}]},{"featureType":"water","elementType":"labels","stylers":[{"hue":"#000000"},{"saturation":-100},{"lightness":-100},{"visibility":"off"}]},{"featureType":"road.local","elementType":"all","stylers":[{"hue":"#ffffff"},{"saturation":-100},{"lightness":100},{"visibility":"on"}]},{"featureType":"water","elementType":"geometry","stylers":[{"hue":"#ffffff"},{"saturation":-100},{"lightness":100},{"visibility":"on"}]},{"featureType":"transit","elementType":"labels","stylers":[{"hue":"#000000"},{"saturation":0},{"lightness":-100},{"visibility":"off"}]},{"featureType":"landscape","elementType":"labels","stylers":[{"hue":"#000000"},{"saturation":-100},{"lightness":-100},{"visibility":"off"}]},{"featureType":"road","elementType":"geometry","stylers":[{"hue":"#bbbbbb"},{"saturation":-100},{"lightness":26},{"visibility":"on"}]},{"featureType":"landscape","elementType":"geometry","stylers":[{"hue":"#dddddd"},{"saturation":-100},{"lightness":-3},{"visibility":"on"}]}]					
				});				
			};


			//bind events
			$('select#sYears').change(function(){
				//only change everything if the map is zoomed out
				if(map.center.lat() === minneapolis_lat && map.center.lng() === minneapolis_lng);
				drawWards();
				updateRaces(); //this function calls updateCandidates();

				//do this no matter if the map is zoomed in or not
				//getResults();

			});

			$('select#sRaces').change(function(){
				updateCandidates();

				var selected = $('select#sRaces').val();

				//if the race is a ward, zoom in on the ward.
				//if the race is a city-wide race, don't do anything
				$.getJSON("/getWardLocation/" + selected, function(data){
					if(data.ward[0]){
						//Go find the center of the ward and set the map to the ward's center
						if(data.ward[0].Center){
							data.ward = (data.ward[0].Center).split(/[()]+/).filter(function(e) { return e; });
							data.ward = getLatLngFromString(data.ward[1]);

							map.setZoom(14);

							//only draw the precincts if the map moves
							//prevents precincts from flickering on drop down select
							if(map.getCenter() !== data.ward){
								removePrecincts();
								allShapes.forEach(function(shape){
									if(google.maps.geometry.poly.containsLocation(data.ward, shape)){
										console.log(shape);
										drawPrecincts(shape);
									}  
								});
							}
						}
						//also make the ward menu visible and recenter the map
						$('div#ward-legend').css('display', 'block');
						map.panTo(data.ward);
					}

				});
			});

			$('span#back-to-city').click(function(){
				map.panTo({lat: 44.98154, lng: -93.270718});
				//map.setCenter({lat: 44.98154, lng: -93.270718});
				map.setZoom(12);
				$('div#ward-legend').css('display', 'none');

				//remove the precincts
				removePrecincts();
			});

		//});

		function getLatLngFromString(ll){
			var latlng = ll.split(/, ?/);
			return new google.maps.LatLng(parseFloat(latlng[0]), parseFloat(latlng[1])); 
		}

		function drawWards(){
			var selected = $('select#sYears option:selected').val();

			removeWards();
			
			//removePrecincts();

			//empty the allShapes array
			allShapes = [];
			allMarkers= [];

			//find all the wards in the election year
			$.getJSON("/getWards/" + selected, function(data){


				//for each ward in the election year
				(data.wards).forEach(function(ward){
					var wardCoords = [];

					//split the boundaries into lat long pairs that will be fed into our function
						if(ward.Boundaries){
						ward.Boundaries = ward.Boundaries.split(/[()]+/).filter(function(e) { return e; });

					//push every latlng pair in the polygon to the google maps initiator function
						for (i=1; i<ward.Boundaries.length; i+=2){
							wardCoords.push(getLatLngFromString(ward.Boundaries[i]));
						}

					// Find the center of the ward
					// (Will come in handy on re-focus)
					var bounds = new google.maps.LatLngBounds();

					for(i=0; i<wardCoords.length; i++){
						bounds.extend(wardCoords[i]);
					}



					// Styling & Controls
							wardDesign = new google.maps.Polygon({
						    paths: wardCoords,
						    //draggable: true, // turn off if it gets annoying
						    //editable: true,
						    strokeColor: '#FF0000',
						    strokeOpacity: 0.8,
						    strokeWeight: 2,
						    fillColor: '#FF0000',
						    fillOpacity: 0.35
						});

					//add the ward label to the map if we are showing wards
					var showWards = true;

					if (showWards) {
						/*var marker = new MarkerWithLabel({
							position: bounds.getCenter(),
							map: map,
							labelContent: ward.Ward_Name,
							labelClass: "marker-labels"
						});*/

						var marker = new google.maps.Marker({
							position: bounds.getCenter(),
							map: map,
							label: {text: ward.Ward_Name, color:"red", fontSize: "15px", fontFamily: "Roboto", fontWeight: "bold"},
							labelInBackground: false,
							labelClass: "marker-labels",
							icon: pinSymbol('transluscent'),
							anchor: bounds.getCenter()

						});	

						//whatever, i can figure this out later. gotta make the markers not move on zoom
						marker.setOptions({anchorPoint: bounds.getCenter() });



					//this should be the center that you can pass to a new map
					//add it to the ward polygon and the marker for re-focus
					//console.log(bounds.getCenter());
					wardDesign['center'] = bounds.getCenter();
					wardDesign['name'] = ward.Ward_Name; 
					wardDesign['id'] = ward.idWard;
					marker['center'] = bounds.getCenter();


					//here it is in a readable format
					//console.log('Lat: ' + bounds.getCenter().lat() +  ' Long: ' + bounds.getCenter().lng()); 



					//add event listener to the ward
						google.maps.event.addListener(wardDesign, 'click', function(event){

							//DO NOT DELETE THIS CONSOLE.LOG
							console.log('new google.maps.LatLng(' + this.center.lat() + ',' + this.center.lng() + '),');
							var center = this.center;
							map.setZoom(14);
							
							//show the ward legend
							$('div#ward-legend').css('display', 'block');

							//if the race is set to another ward's seat
							//set the race to the seat for this ward
							var selectedRace = $('select#sRaces option:selected').text();
							if(selectedRace.indexOf("Ward") >= 0){
								var options = $('select#sRaces').children();

								$('select#sRaces option:contains(' + this.name + ' )').prop('selected', true);	

								//trigger update candidates to show the new race
								updateCandidates();


							}

							//Draw the precincts for the shape the marker is in
							//but only do this if the map moves
							
							if(map.getCenter() !== this.center){
								removePrecincts();
								
								allShapes.forEach(function(shape){
									if(google.maps.geometry.poly.containsLocation(center, shape)){
										console.log(shape);
										drawPrecincts(shape);
									}  
								});
							}
							//set the new center at the end so that
							//we can compare the new one to the old one
							map.setCenter(center);
						});

						google.maps.event.addListener(marker, 'click', function(event){
							console.log('(' + this.center.lat() + ',' + this.center.lng() + ')');
							var center = this.center;
							//map.panTo(center)
							map.setZoom(14);
							$('div#ward-legend').css('display', 'block');
							

							//Draw the precincts for the shape the marker is in
							//but only do this if the map moves
							
							if(map.getCenter() !== this.center){
								removePrecincts();
								
								allShapes.forEach(function(shape){
									if(google.maps.geometry.poly.containsLocation(center, shape)){
										console.log(shape);
										drawPrecincts(shape);
									}  
								});
							}
							//set the new center at the end so that
							//we can compare the new one to the old one
							map.setCenter(center);

						});

					//marker.setVisible(false);
					allMarkers.push(marker);

					}

					allShapes.push(wardDesign);
					wardDesign.setMap(map);

					}

				});

			
			});
		}

		function drawPrecincts(wardDesign){
			//removeWards();
			
			//if you want these precincts to replace all the other precincts on the map

			//if(replaceAll){
			//	removePrecincts();
			//}

			$.getJSON("/getPrecincts/" + wardDesign.id, function(data){
				if(data){
					(data.precincts).forEach(function(precinct){
						var precinctCoords = [];

						//split the boundaries into lat long pairs that will be fed into our function
						if(precinct.Boundaries){
								precinct.Boundaries = precinct.Boundaries.split(/[()]+/).filter(function(e) { return e; });

							//push every latlng pair in the polygon to the google maps initiator function
								for (i=1; i<precinct.Boundaries.length; i+=2){
									precinctCoords.push(getLatLngFromString(precinct.Boundaries[i]));
								}


							// Do I need the center of the precinct? 
							// (Will come in handy on re-focus)
							var bounds = new google.maps.LatLngBounds();

							for(i=0; i<precinctCoords.length; i++){
								bounds.extend(precinctCoords[i]);
							}

							// Styling & Controls
							precinctDesign = new google.maps.Polygon({
							    paths: precinctCoords,
							    //draggable: true, // turn off if it gets annoying
							    //editable: true,
							    strokeColor: '#FF0000',
							    strokeOpacity: 0.8,
							    strokeWeight: 2,
							    fillColor: '#FF0000',
							    //fillColor: '#FF0000',
							    fillOpacity: 0.35
							});

							allPrecincts.push(precinctDesign);
							precinctDesign.setMap(map);

						}
					});
				};

			});
		}

		function removePrecincts(){
			for (var i=0; i<allPrecincts.length; i++){
				allPrecincts[i].setMap(null);
				//allMarkers[i].setMap(null);
			}

			//empty the allShapes array
			allPrecincts = [];
		}

		//first clear all the shapes on the map
		function removeWards(){
			for (var i=0; i<allShapes.length; i++){
				allShapes[i].setMap(null);
				allMarkers[i].setMap(null);
				allShapes = [];
				allMarkes = [];

			}
		}

		var ward1prec1 = [new google.maps.LatLng(45.027614, -93.26325),  new google.maps.LatLng(45.013128, -93.26325), new google.maps.LatLng(45.0131,-93.27501),new google.maps.LatLng(45.03555,-93.28273), new google.maps.LatLng(45.035478, -93.247384), new google.maps.LatLng(45.025741, -93.247384), new google.maps.LatLng(45.024240, -93.250904), new google.maps.LatLng(45.024711, -93.254364),new google.maps.LatLng(45.024926, -93.258673), new google.maps.LatLng(45.027628, -93.260129), ]

		var ward1prec2 = [ new google.maps.LatLng(45.035478, -93.247384), new google.maps.LatLng(45.03555,-93.22694),new google.maps.LatLng(45.025955,-93.226994),new google.maps.LatLng(45.025741, -93.247384)   ]

		var ward1prec3 = [new google.maps.LatLng(45.025741, -93.247384), google.maps.LatLng(45.025955,-93.226994), google.maps.LatLng(45.018920, -93.22694), google.maps.LatLng(45.019273, -93.229649), google.maps.LatLng(45.018682, -93.230100), google.maps.LatLng(45.018591, -93.247416),]

		var ward1prec4 = [ google.maps.LatLng(45.018920, -93.22694), google.maps.LatLng(45.019273, -93.229649), google.maps.LatLng(45.018682, -93.230100), google.maps.LatLng(45.018591, -93.247416), google.maps.LatLng(45.013191, -93.247352), google.maps.LatLng(45.01306,-93.22694) ,   ]

		var ward1prec5 = [google.maps.LatLng(45.013191, -93.247367), google.maps.LatLng(45.013126, -93.237159),new google.maps.LatLng(44.99882,-93.23722),  google.maps.LatLng(44.998860, -93.247303) ];

		var ward1 = [new google.maps.LatLng(44.99878,-93.26334), new google.maps.LatLng(45.0131,-93.26325), new google.maps.LatLng(45.0131,-93.27501), new google.maps.LatLng(45.03555,-93.28273), new google.maps.LatLng(45.03555,-93.23892), new google.maps.LatLng(45.03555,-93.22694), new google.maps.LatLng(45.01306,-93.22694), new google.maps.LatLng(45.01306,-93.21353), new google.maps.LatLng(45.00586,-93.21353), new google.maps.LatLng(45.00604,-93.206252), new google.maps.LatLng(45.00604,-93.206252), new google.maps.LatLng(44.99185,-93.206252), new google.maps.LatLng(44.988077,-93.206252), new google.maps.LatLng(44.987851, -93.233322), new google.maps.LatLng(44.991508,-93.23334), new google.maps.LatLng(44.991508,-93.23722), new google.maps.LatLng(44.99882,-93.23722), new google.maps.LatLng(44.99882,-93.24675)] 

		function updateRaces(){
			//only re-do everything if they have not changed the race box
				//if($('select#sRace').index()>0 && $('select#sRace').length != 0){
				var selected = $('select#sYears').val();
				$.getJSON("/getRaces/" + selected, function(data){

					//clean out the dropdown menu
					$('select#sRaces').children().remove().end();

					
					//populate dropdown menu from returned data
					$.each(data.races, function(i, value){
						$('select#sRaces').append($('<option>').text(value.Name + ' ' + value.Location + ' ').attr('value', value.idRace));
					});

					//set the first one to selected
					//$('select#sraces :nth-child(0)').prop('selected', true);

					//update the candidate list
					updateCandidates();
				});
		}


		function updateCandidates(){
			var selected = $('select#sRaces').val();
			$.getJSON("/getCandidates/" + selected, function(data){
				$('select#sCandidates').children().remove().end();
				//populate dropdown menu from retrieved data
				$.each(data.candidates, function(i, value){
					$('select#sCandidates').append($('<option>').text(value.First + ' ' + value.Last).attr('value', value.idCandidate));
				});
			})
		}
		function pinSymbol(color) {
			return {
				path: 'M 0,0 C -2,-20 -10,-22 -10,-30 A 10,10 0 1,1 10,-30 C 10,-22 2,-20 0,0 z',
				fillColor: color,
				fillOpacity: 0,
				strokeColor: '#000',
				strokeWeight: 0,
				scale: 1,
					labelOrigin: new google.maps.Point(0, -29)
			};
		}


	script(async, defer, src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCiT0h95IpSJ4N3YNhyFnEcEHrv4ruz4SY&callback=initMap")