
extends layout

block content
	div.container
		div.row.map-holder
			div.col-xs-12
				h1.map-title Minneapolis Map
			div.col-xs-9
				div#map
				div#ward-legend


					
			div.col-xs-3
				div#form
					div.row
						div.col-xs-6
							div.form-group
								label(for='sYears') Year
								select.form-control#sYears
									for year, i in years
										option.dropdown-item(value="#{years[i].idElection}") #{years[i].Year}
						div.col-xs-6
							div.toggleViews
								div.form-group
									div.radio
										label(for='rbWardView').radio-inline
											input(type='radio' name='mapView' value='wardView' checked="checked")#rbWardView
											| Wards
								div.form-group
									div.radio
										label(for='rbPrecinctView').radio-inline
											input(type='radio' name='mapView' value='precinctView')#rbPrecinctView
											| Precincts					
					div.form-group
						label(for='sYears') Race
						select.form-control#sRaces

					div.form-group
						label(for='sCandidats') Candidates
						select.form-control#sCandidates

					div.race-results
						label Results
							span.pull-right#location
						ul.list#candidate-list
						

block script
	script(type='text/javascript').

		var minneapolis_lat = 44.98154;
		var minneapolis_lng = -93.270718;
		var city_zoom = 12;

		var allWards = [];
		var allPrecincts = [];

		var selectedWard;
		var selectedPrecinct;

		function populateRaces(newYear){
			var selected = $('select#sYears').val();
			
			$.getJSON("/getRaces/" + selected, function(data){

				//clean out the dropdown menu
				$('select#sRaces').children().remove().end();
					
				//populate dropdown menu from returned data
				//do the city-wide races first
				$.each(data.races, function(i, value){
					if(value.Location === 'Minneapolis'){
						$('select#sRaces').append($('<option>').text(value.Name + ' ' + value.Location + ' ').attr('value', value.idRace));
					}
				});

				//add an "all city council races option"
				//$('select#sRaces').append($('<option>').text("All City Council").attr('value', '0').css('font-weight', 'bold'));
			
				//add the city council races
				$.each(data.races, function(i, value){
					if(value.Location !== 'Minneapolis')
						$('select#sRaces').append($('<option>').text(value.Name + ' ' + value.Location + ' ').attr('value', value.idRace));
				});

				//update the candidate list
				populateCandidates(newYear); //whenever we update the races (i.e. change the year), we want to fully re-draw the wards
			});
		}

		function populateCandidates(newYear){
			var selected = $('select#sRaces').val();
			$.getJSON("/getCandidates/" + selected, function(data){
				//clean out the current candidates list
				$('select#sCandidates').children().remove().end();
				//In the first spot, add an "All candidates"
				$('select#sCandidates').append($('<option>').text("All").attr('value', '0'));				

				//populate dropdown menu from retrieved data
				$.each(data.candidates, function(i, value){
					$('select#sCandidates').append($('<option>').text(value.First + ' ' + value.Last).attr('value', value.idCandidate));
				});

				paintMap(newYear);
			})
		}

		//paint the map, update the race table
		function paintMap(getNewBoundaries){
			var wardView = $('#rbWardView').is(':checked');
			var candidateHeatMap = $('#sCandidates').val();
			var selectedRaceIndex = $("select#sRaces").prop('selectedIndex')
			if(wardView){//paint the wards
				paintWards(getNewBoundaries, candidateHeatMap);
			} else {//paint all the precincts
				if(selectedRaceIndex === 0){//if it's the mayor's race, paint all the precincts
					allWards.forEach(function(ward){
						paintPrecincts(getNewBoundaries, candidateHeatMap, ward)
					})
				} else {
					//just paint the precinct for the one
					var raceSelected = $('#sRaces option:selected').text();
					var correspondingWard;
					allWards.forEach(function(ward){
						if(raceSelected.indexOf(ward.name) > 0){
						correspondingWard = ward; 
					}
				});
					paintPrecincts(true, false, correspondingWard);
					alert("do something else for the city council races!");
				}
			}
		}




		function paintWards(totalRepaint, candidateHeatMap){
			var raceID = $('select#sRaces option:selected').val();			
			//if we need new boundaries, delete everything in our all wards and add the new wards
			if(totalRepaint){
				var selected = $('select#sRaces option:selected').val();
				removeWards();
				removePrecincts();
				$.getJSON("/getWards/" + selected, function(data){
					(data.wards).forEach(function(ward){
						if(ward[0] && ward[0].Boundaries){						
							// Styling & Controls
							wardDesign = new google.maps.Polygon({
								    paths: convertDBtoGM(ward[0]),
								    strokeWeight: 0,
								    strokeColor: 'black',
								    strokeWeight: 3,
								    center: getCenterPolygon(convertDBtoGM(ward[0])),
								    name: ward[0].Ward_Name,
								    id: ward[0].idWard,
								    type: "ward",
								    //zIndex: 200,
								    fptp_shade: ward[0].fptp_shade,
								    rc_shade: ward[0].rc_shade,
								    mayorColor: ward[0].color,
								    strokeOpacityFPTP: ward[0].fptp_shade*10,
								    strokeOpacityRC: ward[0].rc_shade*10				    
							});

							if(ward[0].fptp_shade){
								wardDesign.setOptions({
									fillColor: ward[0].color,
									fillOpacity: ward[0].fptp_shade*10,
									strokeOpacity: ward[0].fptp_shade*10
								});
							} else {
								wardDesign.setOptions({
									fillColor: ward[0].color,
									fillOpacity: ward[0].rc_shade*10,
									strokeOpacity: ward[0].rc_shade*10
								});
							}

							google.maps.event.addListener(wardDesign, 'click', function(e){
								var clickedWard = this;
								$.getJSON("/getResults_wardView/" + this.id +"/" + raceID, function(data){
									populateRaceTable(data.ward_results, clickedWard.name, true);
								});
							});	
							
						allWards.push(wardDesign);
						wardDesign.setMap(map);
					}
					});	
				});

				//then we paint everything that is in all wards
				//every time you get all the wards, you sould re-set the candidate table
				$.getJSON("/getResults_allWards/" + raceID, function(data){
					populateRaceTable(data.results, "City-Wide", false)
				});

			} else {//we are not doing a full repaint and are just painting individual wards
				var raceSelected = $('#sRaces option:selected').text();
				var correspondingWard;
				allWards.forEach(function(ward){
					if(raceSelected.indexOf(ward.name) > 0){
						correspondingWard = ward; 
					}
				});

				//set the selectedWard color back to the mayor's race color
					if(selectedWard){
						selectedWard.setVisible(true); //make it visible again!
						if(selectedWard.fptp_shade){
							selectedWard.setOptions({
								fillColor: selectedWard.mayorColor,
								fillOpacity: selectedWard.fptp_shade,
								strokeOpacity: selectedWard.strokeOpacityFPTP
							});
						} else {
								wardDesign.setOptions({
								fillColor: selectedWard.mayorColor,
								fillOpacity: selectedWard.rc_shade,
								strokeOpacity: selectedWard.strokeOpacityRC
								});
						}
					console.log(selectedWard);
					}

				//set the correspondingward to the new selected ward	
				selectedWard = correspondingWard;
				//correspondingWard.setOptions({fillOpacity: 0})

				if(correspondingWard){
					$.getJSON("/getResults_wardView/" + correspondingWard.id +"/" + raceID, function(data){
						if(data.ward_results){
							paintPrecincts(true, false, correspondingWard);
							populateRaceTable(data.ward_results, correspondingWard.name, true);
						}
					});
				}
			
				allPrecincts.forEach(function(precinct){
					precinct.setVisible(false);
				})





			}
		}

		$("span#location").click(function(){
				var race = "Mayor"
				$('select#sRaces option:contains('+ race +')').prop('selected', true);
				var raceID = $('select#sRaces option:selected').val();
		
				$.getJSON("/getResults_allWards/" + raceID, function(data){
					//populateRaceTable(data.results, "City-Wide", false)
					//paintMap(true);
					populateCandidates(true);
				});
		});

		//when I change the race, I should update the candidates and move the map
		$('select#sRaces').change(function(){
			if($('select#sRaces').prop('selectedIndex')===0){
				paintMap(true)
			} else{

			//paintMap(true);
			populateCandidates(false) //we are not initializing, so we do not need to redraw all the wards. just to have re-paint one ward
			}
		});


		$('select#sCandidates').change(function(){

		});

		function paintPrecincts(getNewBoundaries, candidateHeatMap, wardDesign){
		if(getNewBoundaries){
			removePrecinctsOfSpecificWard(wardDesign);
			//removePrecinctsOfSpecificWard(selectedWard);
			var selectedRace = $('select#sRaces option:selected').val()
		
				$.getJSON("/getPrecincts/" + wardDesign.id + "/" + selectedRace, function(data){
					if(data){
						(data.precincts).forEach(function(precinct){
							if(precinct[0]){

								//don't turn off the color. just make it invisible
								//wardDesign.setOptions({fillOpacity: 0});

								wardDesign.setVisible(false);

								precinctDesign = new google.maps.Polygon({
								    paths: convertDBtoGM(precinct[0]),
								    strokeColor: 'white',
								    strokeOpacity: 1,
								    strokeWeight: 4,
								    //fillColor: '#FF0000',
								    //fillOpacity: 0.35,
								    zIndex: 100,
								    center: getCenterPolygon(convertDBtoGM(precinct[0])),
								    name: precinct[0].Precinct_Num,
								    id: precinct[0].idPrecinct,
								    type: "precinct",
								    parentPolygon: wardDesign
								});

								google.maps.event.addListener(precinctDesign, 'click', function(e){
									var raceID = $('select#sRaces option:selected').val();
									var clickedPrecinct = this;

									$.getJSON("/getResults_precinctView/" + this.id +"/" + raceID, function(data){
										populateRaceTable(data.precinct_results, (clickedPrecinct.parentPolygon).name + ' Precinct ' + clickedPrecinct.name, true);
									});
								});

								allPrecincts.push(precinctDesign);
								
								if(precinct[0].fptp_shade){
									precinctDesign.setOptions({
										fillColor: precinct[0].color,
										fillOpacity: precinct[0].fptp_shade,
										//strokeOpacity: precinct[0].fpfp_shade

									});
								} else {
									precinctDesign.setOptions({
										fillColor: precinct[0].color,
										fillOpacity: precinct[0].rc_shade,
										//strokeOpacity: precinct[0].rc_shade
									})

								}
								precinctDesign.setMap(map);
								allPrecincts.push(precinctDesign);
							}

						});


					};

				});

			//populate the ward-view of the the full city
			if (selectedRace.indexOf('Minneapolis') > 0){
				//then we paint everything that is in all wards
				//every time you get all the wards, you sould re-set the candidate table
				$.getJSON("/getResults_allWards/" + raceID, function(data){
					populateRaceTable(data.results, "City-Wide", false)
				});
			}
			}

		}

		function populateRaceTable(candidates, location, precinctLevel){
			$('ul.list').empty();
			if(location !=='City-Wide'){
				$('span#location').html(location + '<span id="backToCity">   x</span>');
			} else {
				$('span#location').html(location);
			}
			var candidatesLocal;
			if(precinctLevel){
				candidatesLocal = candidates[0];
			} else {
				candidatesLocal = candidates[1];
			}
			candidatesLocal.forEach(function(candidate){

					if($('select#sYears option:selected').text().trim() === '2009' || $('select#sYears option:selected').text().trim() === '2013'){
						//this is the box for people who ran with ranked choice voting
						$('ul.list').append('<li id=' + candidate.idCandidate+ '><div class = "candidate-info" id='+  candidate.idCandidate+'><div class="row"><div class="col-xs-2"><div class = "candidate-color" style="background-color: '+candidate.Color+'"></div></div><div class="col-xs-10"><h3 class="name">'+candidate.First + ' ' + candidate.Last + '</h3></div></div><div class="row"><div class="col-xs-12"><div class="party">' + candidate.Party + '</div></div><div class="col-xs-12"><div class="vote-totals">First place votes: <span class="formatted-votes"> ' + candidate.RC_First_Place_Votes  +'</span><br> Second place votes: <span class="formatted-votes">' + candidate.RC_Second_Place_Votes+ '</span><br> Third place votes: <span class="formatted-votes">' + candidate.RC_Third_Place_Votes + '  </span></div></div></div><div class="row"><div class="col-xs-12"><div class="learn-more">Learn more +</div></div></row></li>');
					} else {
						//this is the box for people who ran with FPTP voting
						$('ul.list').append('<li id=' + candidate.idCandidate+ '><div class = "candidate-info" id='+  candidate.idCandidate+'><div class="row"><div class="col-xs-2"><div class = "candidate-color"></div></div><div class="col-xs-10"><h3 class="name">'+candidate.First + ' ' + candidate.Last + '</h3></div></div><div class="row"><div class="col-xs-12"><div class="party">' + candidate.Party + '</div></div><div class="col-xs-12"><div class="vote-totals">Votes: <span class="formatted-votes"> ' + candidate.FPTP_Votes_Sum  +'</span></div></div></div><div class="row"><div class="col-xs-12"><div class="learn-more">Learn more +</div></div></row></li>');
					}				
			});
		}

		function removePrecincts(){
			for (var i=0; i<allPrecincts.length; i++){
				allPrecincts[i].setMap(null);
			}
			allPrecincts = [];			
		}

		function removePrecinctsOfSpecificWard(ward){
			for (var i=0; i<allPrecincts.length; i++){
				if((allPrecincts[i].parentPolygon).name === ward.name){
					allPrecincts[i].setMap(null);
				}
			}
		}



		function removeWards(){
			for (var i=0; i<allWards.length; i++){
				allWards[i].setMap(null);
			}
			allWards = [];
		}
		function convertDBtoGM(dbBoundaries) {
			var coords = [];
			var center;
			if(dbBoundaries.Boundaries){
				gmBoundaries = dbBoundaries.Boundaries.split(/[()]+/).filter(function(e) { return e; });
				for (i=1; i<gmBoundaries.length; i+=2){
					coords.push(getLatLngFromString(gmBoundaries[i]));
				}
			}

			return coords;
		}

		function getCenterPolygon(polygonBoundaries){
			var bounds = new google.maps.LatLngBounds();
			for(i=0; i<polygonBoundaries.length; i++){
				bounds.extend(polygonBoundaries[i]);
			}

			return bounds.getCenter();

		}

		function getLatLngFromString(ll){
			var latlng = ll.split(/, ?/);
			return new google.maps.LatLng(parseFloat(latlng[0]), parseFloat(latlng[1])); 
		}

		/***EVENT BINDING***/
		$('input[type=radio][name=mapView]').change(function() {
			var checkedValue = $('input[name=mapView]:checked').val()
			if (checkedValue === 'wardView'){

				paintMap(true);
			} else { //painting precincts

			removePrecincts();
			populateRaces(true);
				//paintMap(true);
			}
		

		});


		function initMap(){
				map = new google.maps.Map(document.getElementById('map'), {
					center: {lat: minneapolis_lat, lng: minneapolis_lng},
					zoom: city_zoom,
					styles: [
					    {
					        "featureType": "administrative",
					        "elementType": "labels.text.fill",
					        "stylers": [
					            {
					                "color": "#444444"
					            }
					        ]
					    },
					     {
						    "featureType": "administrative.locality",
						    "elementType": "labels",
						    "stylers": [
						      { "visibility": "off" }
						    ]
						},
					     {
						    "featureType": "administrative.neighborhood",
						    "elementType": "labels",
						    "stylers": [
						      { "visibility": "off" }
						    ]
						},

					    {
					        "featureType": "landscape",
					        "elementType": "all",
					        "stylers": [
					            {
					                "color": "#f2f2f2"
					            }
					        ]
					    },
					    {
					        "featureType": "poi",
					        "elementType": "all",
					        "stylers": [
					            {
					                "visibility": "off"
					            }
					        ]
					    },
					    {
					        "featureType": "road",
					        "elementType": "all",
					        "stylers": [
					            {
					                "saturation": -100
					            },
					            {
					                "lightness": 45
					            }
					        ]
					    },
					    {
					        "featureType": "road.highway",
					        "elementType": "all",
					        "stylers": [
					            {
					                "visibility": "simplified"
					            }
					        ]
					    },
					    {
					        "featureType": "road.arterial",
					        "elementType": "labels.icon",
					        "stylers": [
					            {
					                "visibility": "off"
					            }
					        ]
					    },
					    {
					        "featureType": "transit",
					        "elementType": "all",
					        "stylers": [
					            {
					                "visibility": "off"
					            }
					        ]
					    },
					    {
					        "featureType": "water",
					        "elementType": "all",
					        "stylers": [
					            {
					                "color": "#46bcec"
					            },
					            {
					                "visibility": "on"
					            }
					        ]
					    }
					]
				});


			populateRaces(true);
								
			};


	script(async, defer, src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCiT0h95IpSJ4N3YNhyFnEcEHrv4ruz4SY&callback=initMap")