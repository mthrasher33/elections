
extends layout

block content
	div.container
		div.row.map-holder
			div.col-xs-12
				h1.map-title Minneapolis Map
			div.col-xs-9
				div#map
				div#ward-legend
					ul
						li
							a(href='http://www.nba.com') Homepage
						li
							a(href='#') Ward History
						li
							a(href='#') Contact
						li#back
							span#back Back
			div.col-xs-3
				div#form
					div.form-group
						label(for='sYears') Year
						select.form-control#sYears
							for year, i in years
								option.dropdown-item(value="#{years[i].idElection}") #{years[i].Year}					
					div.form-group
						label(for='sYears') Race
						select.form-control#sRaces

					div.form-group
						label(for='sCandidats') Candidates
						select.form-control#sCandidates

					div.race-results
						label Results
							span.pull-right#location City-Wide
						ul.list#candidate-list
						

block script
	script(type='text/javascript').
		var allShapes = [];
		var allPrecincts = [];
		var allMarkers = [];
		var regExp = /\(([^)]+)\)/;
		var minneapolis_lat = 44.98154;
		var minneapolis_lng = -93.270718;
		var selectedWard;
		var selectedPrecinct;

		var map;
		var city_zoom = 12;
		var ward_zoom = 14;
		var precinct_zoom = 15;


			updateRaces();

			function initMap(){


				wardDesign = new google.maps.Polygon({
					//paths: wardCoords,
					strokeWeight: 0,
					fillColor: '#FFFFFF'
				});

				map = new google.maps.Map(document.getElementById('map'), {
					center: {lat: minneapolis_lat, lng: minneapolis_lng},
					zoom: city_zoom,
					styles: [
					    {
					        "featureType": "administrative",
					        "elementType": "labels.text.fill",
					        "stylers": [
					            {
					                "color": "#444444"
					            }
					        ]
					    },
					     {
						    "featureType": "administrative.neighborhood",
						    "elementType": "labels",
						    "stylers": [
						      { "visibility": "off" }
						    ]
						},

					    {
					        "featureType": "landscape",
					        "elementType": "all",
					        "stylers": [
					            {
					                "color": "#f2f2f2"
					            }
					        ]
					    },
					    {
					        "featureType": "poi",
					        "elementType": "all",
					        "stylers": [
					            {
					                "visibility": "off"
					            }
					        ]
					    },
					    {
					        "featureType": "road",
					        "elementType": "all",
					        "stylers": [
					            {
					                "saturation": -100
					            },
					            {
					                "lightness": 45
					            }
					        ]
					    },
					    {
					        "featureType": "road.highway",
					        "elementType": "all",
					        "stylers": [
					            {
					                "visibility": "simplified"
					            }
					        ]
					    },
					    {
					        "featureType": "road.arterial",
					        "elementType": "labels.icon",
					        "stylers": [
					            {
					                "visibility": "off"
					            }
					        ]
					    },
					    {
					        "featureType": "transit",
					        "elementType": "all",
					        "stylers": [
					            {
					                "visibility": "off"
					            }
					        ]
					    },
					    {
					        "featureType": "water",
					        "elementType": "all",
					        "stylers": [
					            {
					                "color": "#46bcec"
					            },
					            {
					                "visibility": "on"
					            }
					        ]
					    }
					]
				});				
			};


		//the click function for the polygons
		function moveMap(polygon, backToCity) {
			var polyArray = [];
			polyArray.push(polygon);

			if(backToCity){
				removePrecincts();
				if(selectedWard){(selectedWard.label).setVisible(true)}; //set the label of the ward you're coming off of to visible
				map.setZoom(city_zoom);
				map.setCenter({lat: minneapolis_lat, lng: minneapolis_lng})

				//go back to the selected race, mayor's race or all city council with no precincts
				getResults(false);
			} else {

				if(polygon.type === 'ward'){
					removePrecincts();
					map.setZoom(ward_zoom);
					$('div#ward-legend').css('display', 'block');
					if(selectedWard){(selectedWard.label).setVisible(true)}; //set the label of the ward you're coming off of to visible
					selectedWard = polygon;
					(polygon.label).setVisible(false); // make the label of the selected ward invisible

					//need to call a function that is going to 
					//update the results, color the polygons, and add them
					//DUH! draw precincts should include shading them
					//drawPrecincts(polygon[0]);

					getResults(true, polygon);

				} else if (polygon.type === 'precinct'){
					selectedPrecint = polygon;
					map.setZoom(precinct_zoom);
					//there is nothing you will have to do here, since all of this info will
					//already be provided

					//show the results for just this precinct
					getResults(true, polygon);
				}

				map.setCenter(polygon.center);

			}

		}


		//click functions on polygons and all filter events will call this
		//all json calls come out of here
		function getResults(precinctZoom, polygon){
			var raceID = $('select#sRaces option:selected').val();
			var candidateID = $('select#sCandidates option:selected').val();
			//all city council raceID = 0. 
			if(precinctZoom && polygon.type === 'ward'){ //draw all the precincts in one ward
				
				$.getJSON("/getResults_wardView/" + polygon.id +"/" + raceID, function(data){
					updateCandidateList(data.ward_results, polygon.name, false);
					drawPrecincts(polygon);
				});

			} else if(precinctZoom && polygon.type ==='precinct'){ //draw up the table just for the precinct in the ward
				$.getJSON("/getResults_precinctView/" + polygon.id +"/" + raceID, function(data){
					updateCandidateList(data.precinct_results, (polygon.parentPolygon).name + ' Precinct ' + polygon.name, true);
				});
			}

			else if(!precinctZoom && !polygon ) { //draw all the wards in the city, no precincts
				$.getJSON("/getResults_allWards/" + raceID, function(data){
					updateCandidateList(data.results, "City-Wide", false)
				});

			} else if(precinctZoom && !polygon) { //draw all the precincts in the city, no wards

			}
		}

		//this is already doing what you want. just need to improve it
		function updateResults(wardLevel, precinctLevel){
			console.log('called on start up');
			var selected = $('select#sRaces option:selected').val();
			var candidateColors = ['blue', 'yellow', 'orange', 'purple', 'teal'];
			var location;

			//only call this function if we are doing wardLevel
			$.getJSON("/getResults_allWards/" + selected, function(data){

				//get location 
				if(map.getCenter().lat() === 44.98154 && map.getCenter().lng() === -93.270718){
					location = "City-Wide"
				} 

				//re-do the candidate list
				updateCandidateList(data.results, location, precinctLevel)


				//paint the wards according to the winners
				allShapes.forEach(function(ward){
					ward.setOptions({
						fillColor:'green',
						strokeColor: '#FF0000',
						strokeOpacity: 0.8,
						strokeWeight: 2,
						fillColor: '#FF0000',
						fillOpacity: 0.35
					});
				})
			})
		}



		function drawWards(){
			var selected = $('select#sYears option:selected').val();
		
			$.getJSON("/getWards/" + selected, function(data){
				(data.wards).forEach(function(ward){
					if(ward.Boundaries){
								
					// Styling & Controls
					wardDesign = new google.maps.Polygon({
						    paths: convertDBtoGM(ward),
						    strokeWeight: 0,
						    fillColor: '#FFFFFF',
						    center: getCenterPolygon(convertDBtoGM(ward)),
						    name: ward.Ward_Name,
						    id: ward.idWard,
						    type: "ward",
						    
					});

					google.maps.event.addListener(wardDesign, 'click', function(e){
						//if we are zoomed in on another ward and the race is not they mayor's, set it to the ward race						
						var selectedRace = $('select#sRaces option:selected').text();
						if(!selectedRace.indexOf("Minneapolis") >=0 && map.getZoom()===ward_zoom) {
							setRaceToWardRace($(this)[0]);
						} 

						moveMap($(this)[0]);
					});

					addLabel(wardDesign);
					allShapes.push(wardDesign);
					wardDesign.setMap(map);

					/*google.maps.event.addListener(wardDesign, 'click', function(event){

							//DO NOT DELETE THIS CONSOLE.LOG
							console.log('new google.maps.LatLng(' + this.center.lat() + ',' + this.center.lng() + '),');
							var center = this.center;
							map.setZoom(ward_zoom);
							
							//show the ward legend
							$('div#ward-legend').css('display', 'block');

							//if the race is set to another ward's seat
							//set the race to the seat for this ward
							var selectedRace = $('select#sRaces option:selected').text();
							if(selectedRace.indexOf("Ward") >= 0){
								var options = $('select#sRaces').children();

								$('select#sRaces option:contains(' + this.name + ' )').prop('selected', true);	

								//trigger update candidates to show the new race
								updateCandidates();


							}

							//Draw the precincts for the shape the marker is in
							//but only do this if the map moves							
							if(map.getCenter() !== this.center){
								removePrecincts();
								
								allShapes.forEach(function(shape){
									if(google.maps.geometry.poly.containsLocation(center, shape)){
										drawPrecincts(shape); //everytime precincts are drawn, I should update races
									}  
								});
							}

							//also going to have to update the races.
							//if we are on the mayoral race, show ward results


							//set the new center at the end so that
							//we can compare the new one to the old one
							map.setCenter(center);
						});

						google.maps.event.addListener(marker, 'click', function(event){
							var center = this.center;
							//map.panTo(center)
							map.setZoom(ward_zoom);
							$('div#ward-legend').css('display', 'block');
							

							//Draw the precincts for the shape the marker is in
							//but only do this if the map moves
							
							if(map.getCenter() !== this.center){
								removePrecincts();
								
								allShapes.forEach(function(shape){
									if(google.maps.geometry.poly.containsLocation(center, shape)){
										drawPrecincts(shape);
									}  
								});
							}
							//set the new center at the end so that
							//we can compare the new one to the old one
							map.setCenter(center);
						 */
				} 
			});
					//the last thing we do is paint the results on the wards/precincts
					updateResults();

			});
		}

		function drawPrecincts(wardDesign){
	
			$.getJSON("/getPrecincts/" + wardDesign.id, function(data){
				if(data){
					(data.precincts).forEach(function(precinct){
						precinctDesign = new google.maps.Polygon({
					    paths: convertDBtoGM(precinct),
					    strokeColor: '#FF0000',
					    strokeOpacity: 0.8,
					    strokeWeight: 2,
					    fillColor: '#FF0000',
					    fillOpacity: 0.35,
					    zIndex: 100,
					    center: getCenterPolygon(convertDBtoGM(precinct)),
					    name: precinct.Precinct_Num,
					    id: precinct.idPrecinct,
					    type: "precinct",
					    parentPolygon: wardDesign
					});

					google.maps.event.addListener(precinctDesign, 'click', function(e){
						moveMap($(this)[0]);
					});

					allPrecincts.push(precinctDesign);
					precinctDesign.setMap(map);


							/*//add click listener to precinct
							google.maps.event.addListener(precinctDesign, 'click', function(event){
								var precinctLevel = true;
								//i'll need to get the results for the precinct 
								var precinctID = this.id;
								var precinctName = this.name;
								var raceID = $('select#sRaces option:selected').val();
								$.getJSON("/getResults_precinctView/" + precinctID +"/" + raceID, function(data){
									updateCandidateList(data.precinct_results, wardDesign.name + ' Precinct ' + precinctName, true);
								});

								//replace the 'back to city view' with a 'back to ward view'
								$('')

								//i'll need to re-center the map on the precinct
								//set the new center at the end so that
								//we can compare the new one to the old one
								map.setCenter(this.center);
								map.setZoom(precinct_zoom);
							});*/
					});

						//so if we get back precinct data,
						//update the race results to show ward totals
						//but we only need to do this if it's mayor races selected
						/*var selected = $('select#sRaces option:selected').text();

						if (selected.indexOf("Minneapolis") >= 0){
							var wardID = wardDesign.id;
							var raceID = $('select#sRaces option:selected').val();
							//
							$.getJSON("/getResults_wardView/" + wardID +"/" + raceID, function(data){
								updateCandidateList(data.ward_results, wardDesign.name, false);
							});
						} else {
						}*/
				};

			});
		}

		/***SHOW DATA***/

		

		function updateCandidateList(candidates, location, precinctLevel){
			$('ul.list').empty();
			$('span#location').text(location);
			var candidatesLocal;
			if(precinctLevel){
				candidatesLocal = candidates[0];
			} else {
				candidatesLocal = candidates[1];
			}
			candidatesLocal.forEach(function(candidate){
					if($('select#sYears option:selected').text().trim() === '2009' || $('select#sYears option:selected').text().trim() === '2013'){
						//this is the box for people who ran with ranked choice voting
						$('ul.list').append('<li id=' + candidate.idCandidate+ '><div class = "candidate-info" id='+  candidate.idCandidate+'><div class="row"><div class="col-xs-2"><div class = "candidate-color"></div></div><div class="col-xs-10"><h3 class="name">'+candidate.First + ' ' + candidate.Last + '</h3></div></div><div class="row"><div class="col-xs-12"><div class="party">' + candidate.Party + '</div></div><div class="col-xs-12"><div class="vote-totals">First place votes: <span class="formatted-votes"> ' + candidate.RC_First_Place_Votes  +'</span><br> Second place votes: <span class="formatted-votes">' + candidate.RC_Second_Place_Votes+ '</span><br> Third place votes: <span class="formatted-votes">' + candidate.RC_Third_Place_Votes + '  </span></div></div></div><div class="row"><div class="col-xs-12"><div class="learn-more">Learn more +</div></div></row></li>');
					} else {
						//this is the box for people who ran with FPTP voting
						$('ul.list').append('<li id=' + candidate.idCandidate+ '><div class = "candidate-info" id='+  candidate.idCandidate+'><div class="row"><div class="col-xs-2"><div class = "candidate-color"></div></div><div class="col-xs-10"><h3 class="name">'+candidate.First + ' ' + candidate.Last + '</h3></div></div><div class="row"><div class="col-xs-12"><div class="party">' + candidate.Party + '</div></div><div class="col-xs-12"><div class="vote-totals">Votes: <span class="formatted-votes"> ' + candidate.FPTP_Votes_Sum  +'</span></div></div></div><div class="row"><div class="col-xs-12"><div class="learn-more">Learn more +</div></div></row></li>');


					//this is the box for people who ran with fptp voting

					}				
			});
		}



		/***POPULATE FILTERS****/
		//updates candidates when it's done
		function updateRaces(){
			var selected = $('select#sYears').val();
			
			$.getJSON("/getRaces/" + selected, function(data){

				//clean out the dropdown menu
				$('select#sRaces').children().remove().end();

					
				//populate dropdown menu from returned data
				//do the city-wide races first
				$.each(data.races, function(i, value){
					if(value.Location === 'Minneapolis'){
						$('select#sRaces').append($('<option>').text(value.Name + ' ' + value.Location + ' ').attr('value', value.idRace));
					}
				});

				//add an "all city council races option"
				$('select#sRaces').append($('<option>').text("All City Council").attr('value', '0').css('font-weight', 'bold'));
			
				//add the city council races
				$.each(data.races, function(i, value){
					if(value.Location !== 'Minneapolis')
						$('select#sRaces').append($('<option>').text(value.Name + ' ' + value.Location + ' ').attr('value', value.idRace));
				});

				//set the first one to selected
				//$('select#sraces :nth-child(0)').prop('selected', true);

				//update the candidate list
				updateCandidates(true); //whenever we update the races (i.e. change the year), we want to fully re-draw the wards

			});
		}


		//calls draw wards when it's completed
		function updateCandidates(initialize, callback){
			var selected = $('select#sRaces').val();
			$.getJSON("/getCandidates/" + selected, function(data){
				$('select#sCandidates').children().remove().end();
				//In the first spot, add an "All candidates"
				$('select#sCandidates').append($('<option>').text("All").attr('value', '0'));				

				//populate dropdown menu from retrieved data
				$.each(data.candidates, function(i, value){
					$('select#sCandidates').append($('<option>').text(value.First + ' ' + value.Last).attr('value', value.idCandidate));
				});
				
				if(initialize){
					drawWards();
				} else { //since we're not drawing the wards, find the shape associated with the race and set the map to move to it
					
					var selectedRace = $('select#sRaces option:selected').text();
					var selectedWard;

					allShapes.forEach(function(ward){
						if(selectedRace.indexOf(ward.name) >= 0){
							selectedWard = ward;
							moveMap(ward);
						}
					})
				}

			})
			
			return true;
		}


		/****BIND EVENTS****/

		$('select#sYears').change(function(){

		});
		
		//when I change the race, I should update the candidates and move the map
		$('select#sRaces').change(function(){
			updateCandidates(false); //we are not initializing, so we do not need to redraw the wards


		});


		$('select#sCandidates').change(function(){

		});

		$('li#back').click(function(){
			if(map.getZoom() === ward_zoom){
				$('select#sRaces option:contains("Mayor Minneapolis")').prop('selected', true);
				moveMap(selectedWard, true);

			} else {
				moveMap(selectedWard);
			}
		});


		/*	//bind events
			$('select#sYears').change(function(){
				//only change everything if the map is zoomed out
				if(map.center.lat() === minneapolis_lat && map.center.lng() === minneapolis_lng);
					updateRaces(); //this function calls updateCandidates();
			});

			$('select#sRaces').change(function(){
				var selected = $('select#sRaces').val();

				updateCandidates(true, false);

				//if the race is a ward, zoom in on the ward.
				//if the race is a city-wide race, don't do anything
				$.getJSON("/getWardLocation/" + selected, function(data){
					if(data.ward[0]){
						//Go find the center of the ward and set the map to the ward's center
						if(data.ward[0].Center){
							data.ward = (data.ward[0].Center).split(/[()]+/).filter(function(e) { return e; });
							data.ward = getLatLngFromString(data.ward[1]);

							map.setZoom(ward_zoom);

							//only draw the precincts if the map moves
							//prevents precincts from flickering on drop down select
							if(map.getCenter() !== data.ward){
								removePrecincts();
								allShapes.forEach(function(shape){
									if(google.maps.geometry.poly.containsLocation(data.ward, shape)){
										drawPrecincts(shape);
									}  
								});
							}
						}
						//also make the ward menu visible and recenter the map
						$('div#ward-legend').css('display', 'block');
						map.panTo(data.ward);
					}

				});
			});

			$('select#sCandidates').change(function(){
				var selected = $('select#sCandidates option:selected').val();
				var candidate_scroll = $('ul#candidate-list li h3.name:contains('+ selected +')');

				$('ul#candidate-list li#' +selected).position().top();

				//$('ul#candidate-list').animate({
				//	scrollTop: $('ul#candidate-list li#' + selected ).position().top
				//	}, 'slow');
				})

			$('span#back-to-city').click(function(){
				map.panTo({lat: 44.98154, lng: -93.270718});
				//map.setCenter({lat: 44.98154, lng: -93.270718});
				map.setZoom(city_zoom);
				$('div#ward-legend').css('display', 'none');

				//remove the precincts
				removePrecincts();

				//set the map back to the mayor
				$('select#sRaces option:contains(Mayor)').prop('selected', true);

				//update the map accordingly
				updateCandidates();

				//reset the results label to 'City Wide'
				$('span#location').text('City Wide');

			});

		*/	

		/****UTILITY FUNCTIONS****/


		function setRaceToWardRace(polygon){
			$('select#sRaces option:contains(' + polygon.name + ' )').prop('selected', true);
		}

		function addLabel(polygon){
			var marker = new google.maps.Marker({
				position: polygon.center,
				map: map,
				label: {text: polygon.name, color:"red", fontSize: "15px", fontFamily: "Roboto", fontWeight: "bold"},
				labelInBackground: false,
				labelClass: "marker-labels",
				icon: pinSymbol('transluscent'),
				anchor: polygon.center,
				center: polygon.center,
				parentPolygon: polygon
			});

			google.maps.event.addListener(
				marker, 'click', function(e){
				moveMap($(this)[0].parentPolygon);
			});

			allMarkers.push(marker);
			
			//link the marker to the parent polygon
			(marker.parentPolygon)['label'] = marker;

		}		

		function removePrecincts(){
			for (var i=0; i<allPrecincts.length; i++){
				allPrecincts[i].setMap(null);
				//allMarkers[i].setMap(null);
			}

			//empty the allShapes array
			allPrecincts = [];
		}

		//first clear all the shapes on the map
		function removeWards(){
			for (var i=0; i<allShapes.length; i++){
				allShapes[i].setMap(null);
				allMarkers[i].setMap(null);
			}

			allShapes = [];
			allMarkers = [];
		}

		//converts the boundaries column in MYSQL to google maps boundaries object
		function convertDBtoGM(dbBoundaries) {
			var coords = [];
			var center;
			if(dbBoundaries.Boundaries){
				gmBoundaries = dbBoundaries.Boundaries.split(/[()]+/).filter(function(e) { return e; });
				for (i=1; i<gmBoundaries.length; i+=2){
					coords.push(getLatLngFromString(gmBoundaries[i]));
				}
			}

			return coords;
		}

		function getCenterPolygon(polygonBoundaries){
			var bounds = new google.maps.LatLngBounds();
			for(i=0; i<polygonBoundaries.length; i++){
				bounds.extend(polygonBoundaries[i]);
			}

			return bounds.getCenter();

		}

		function getLatLngFromString(ll){
			var latlng = ll.split(/, ?/);
			return new google.maps.LatLng(parseFloat(latlng[0]), parseFloat(latlng[1])); 
		}


		function pinSymbol(color) {
			return {
				path: 'M 0,0 C -2,-20 -10,-22 -10,-30 A 10,10 0 1,1 10,-30 C 10,-22 2,-20 0,0 z',
				fillColor: color,
				fillOpacity: 0,
				strokeColor: '#000',
				strokeWeight: 0,
				scale: 1,
					labelOrigin: new google.maps.Point(0, -29)
			};
		}


	script(async, defer, src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCiT0h95IpSJ4N3YNhyFnEcEHrv4ruz4SY&callback=initMap")