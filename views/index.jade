
extends layout

block content
	div.container
		div.row.map-holder
			div.col-xs-12
				h1.map-title Minneapolis Map
			div.col-xs-9
				div#map
				div#ward-legend
					ul
						li
							a(href='http://www.nba.com') Homepage
						li
							a(href='#') Ward History
						li
							a(href='#') Contact
						li
							span#back-to-city Back to City View
			div.col-xs-3
				div#form
					div.form-group
						label(for='sYears') Year
						select.form-control#sYears
							for year, i in years
								option.dropdown-item(value="#{years[i].idElection}") #{years[i].Year}					
					div.form-group
						label(for='sYears') Race
						select.form-control#sRaces

					div.form-group
						label(for='sCandidats') Candidates
						select.form-control#sCandidates

					div.race-results
						label Results
							span.pull-right#location City-Wide
						ul.list#candidate-list
						

block script
	script(type='text/javascript').
		var allShapes = [];
		var allPrecincts = [];
		var allMarkers = [];
		var regExp = /\(([^)]+)\)/;
		var minneapolis_lat = 44.98154;
		var minneapolis_lng = -93.270718;

		//$(document).ready(function() {
			updateRaces();

			var map;
			function initMap(){

				map = new google.maps.Map(document.getElementById('map'), {
					center: {lat: minneapolis_lat, lng: minneapolis_lng},
					zoom: 12,
					styles: [
					    {
					        "featureType": "administrative",
					        "elementType": "labels.text.fill",
					        "stylers": [
					            {
					                "color": "#444444"
					            }
					        ]
					    },
					     {
						    "featureType": "administrative.neighborhood",
						    "elementType": "labels",
						    "stylers": [
						      { "visibility": "off" }
						    ]
						},

					    {
					        "featureType": "landscape",
					        "elementType": "all",
					        "stylers": [
					            {
					                "color": "#f2f2f2"
					            }
					        ]
					    },
					    {
					        "featureType": "poi",
					        "elementType": "all",
					        "stylers": [
					            {
					                "visibility": "off"
					            }
					        ]
					    },
					    {
					        "featureType": "road",
					        "elementType": "all",
					        "stylers": [
					            {
					                "saturation": -100
					            },
					            {
					                "lightness": 45
					            }
					        ]
					    },
					    {
					        "featureType": "road.highway",
					        "elementType": "all",
					        "stylers": [
					            {
					                "visibility": "simplified"
					            }
					        ]
					    },
					    {
					        "featureType": "road.arterial",
					        "elementType": "labels.icon",
					        "stylers": [
					            {
					                "visibility": "off"
					            }
					        ]
					    },
					    {
					        "featureType": "transit",
					        "elementType": "all",
					        "stylers": [
					            {
					                "visibility": "off"
					            }
					        ]
					    },
					    {
					        "featureType": "water",
					        "elementType": "all",
					        "stylers": [
					            {
					                "color": "#46bcec"
					            },
					            {
					                "visibility": "on"
					            }
					        ]
					    }
					]
				});				
			};


			//bind events
			$('select#sYears').change(function(){
				//only change everything if the map is zoomed out
				if(map.center.lat() === minneapolis_lat && map.center.lng() === minneapolis_lng);
					//drawWards();
					updateRaces(); //this function calls updateCandidates();

					//do this no matter if the map is zoomed in or not
					//getResults();

			});

			$('select#sRaces').change(function(){
				updateCandidates(true, false);

				var selected = $('select#sRaces').val();

				//if the race is a ward, zoom in on the ward.
				//if the race is a city-wide race, don't do anything
				$.getJSON("/getWardLocation/" + selected, function(data){
					if(data.ward[0]){
						//Go find the center of the ward and set the map to the ward's center
						if(data.ward[0].Center){
							data.ward = (data.ward[0].Center).split(/[()]+/).filter(function(e) { return e; });
							data.ward = getLatLngFromString(data.ward[1]);

							map.setZoom(14);

							//only draw the precincts if the map moves
							//prevents precincts from flickering on drop down select
							if(map.getCenter() !== data.ward){
								removePrecincts();
								allShapes.forEach(function(shape){
									if(google.maps.geometry.poly.containsLocation(data.ward, shape)){
										drawPrecincts(shape);
									}  
								});
							}
						}
						//also make the ward menu visible and recenter the map
						$('div#ward-legend').css('display', 'block');
						map.panTo(data.ward);
					}

				});
			});

			$('select#sCandidates').change(function(){
				var selected = $('select#sCandidates option:selected').val();

				var candidate_scroll = $('ul#candidate-list li h3.name:contains('+ selected +')');



				$('ul#candidate-list li#' +selected).position().top();

				//$('ul#candidate-list').animate({
				//	scrollTop: $('ul#candidate-list li#' + selected ).position().top
				//	}, 'slow');
				})

			$('span#back-to-city').click(function(){
				map.panTo({lat: 44.98154, lng: -93.270718});
				//map.setCenter({lat: 44.98154, lng: -93.270718});
				map.setZoom(12);
				$('div#ward-legend').css('display', 'none');

				//remove the precincts
				removePrecincts();
			});

		//});

		function getLatLngFromString(ll){
			var latlng = ll.split(/, ?/);
			return new google.maps.LatLng(parseFloat(latlng[0]), parseFloat(latlng[1])); 
		}

		//gets the points for the wards, but no colors
		//colors come from updateResults()
		//calls updateresults() when finished
		function drawWards(){
			var selected = $('select#sYears option:selected').val();
			removeWards();
			
			//removePrecincts();

			//empty the allShapes array
			allShapes = [];
			allMarkers= [];

			//find all the wards in the election year
			$.getJSON("/getWards/" + selected, function(data){


				//for each ward in the election year
				(data.wards).forEach(function(ward){
					var wardCoords = [];

					//split the boundaries into lat long pairs that will be fed into our function
						if(ward.Boundaries){
						ward.Boundaries = ward.Boundaries.split(/[()]+/).filter(function(e) { return e; });

					//push every latlng pair in the polygon to the google maps initiator function
						for (i=1; i<ward.Boundaries.length; i+=2){
							wardCoords.push(getLatLngFromString(ward.Boundaries[i]));
						}

					// Find the center of the ward
					// (Will come in handy on re-focus)
					var bounds = new google.maps.LatLngBounds();

					for(i=0; i<wardCoords.length; i++){
						bounds.extend(wardCoords[i]);
					}



					// Styling & Controls
							wardDesign = new google.maps.Polygon({
						    paths: wardCoords,
						    //draggable: true, // turn off if it gets annoying
						    //editable: true,
						    //strokeColor: '#FF0000',
						    //strokeOpacity: 0.8,
						    strokeWeight: 0,
						    fillColor: '#FFFFFF'
						    //fillOpacity: 0.35
						});

					//add the ward label to the map if we are showing wards
					var showWards = true;

					if (showWards) {
						/*var marker = new MarkerWithLabel({
							position: bounds.getCenter(),
							map: map,
							labelContent: ward.Ward_Name,
							labelClass: "marker-labels"
						});*/

						var marker = new google.maps.Marker({
							position: bounds.getCenter(),
							map: map,
							label: {text: ward.Ward_Name, color:"red", fontSize: "15px", fontFamily: "Roboto", fontWeight: "bold"},
							labelInBackground: false,
							labelClass: "marker-labels",
							icon: pinSymbol('transluscent'),
							anchor: bounds.getCenter()

						});	

						//whatever, i can figure this out later. gotta make the markers not move on zoom
						marker.setOptions({anchorPoint: bounds.getCenter() });



					//this should be the center that you can pass to a new map
					//add it to the ward polygon and the marker for re-focus
					wardDesign['center'] = bounds.getCenter();
					wardDesign['name'] = ward.Ward_Name; 
					wardDesign['id'] = ward.idWard;
					marker['center'] = bounds.getCenter();


					//here it is in a readable format



					//add event listener to the ward
						google.maps.event.addListener(wardDesign, 'click', function(event){

							//DO NOT DELETE THIS CONSOLE.LOG
							console.log('new google.maps.LatLng(' + this.center.lat() + ',' + this.center.lng() + '),');
							var center = this.center;
							map.setZoom(14);
							
							//show the ward legend
							$('div#ward-legend').css('display', 'block');

							//if the race is set to another ward's seat
							//set the race to the seat for this ward
							var selectedRace = $('select#sRaces option:selected').text();
							if(selectedRace.indexOf("Ward") >= 0){
								var options = $('select#sRaces').children();

								$('select#sRaces option:contains(' + this.name + ' )').prop('selected', true);	

								//trigger update candidates to show the new race
								updateCandidates();


							}

							//Draw the precincts for the shape the marker is in
							//but only do this if the map moves							
							if(map.getCenter() !== this.center){
								removePrecincts();
								
								allShapes.forEach(function(shape){
									if(google.maps.geometry.poly.containsLocation(center, shape)){
										drawPrecincts(shape); //everytime precincts are drawn, I should update races
									}  
								});
							}

							//also going to have to update the races.
							//if we are on the mayoral race, show ward results


							//set the new center at the end so that
							//we can compare the new one to the old one
							map.setCenter(center);
						});

						google.maps.event.addListener(marker, 'click', function(event){
							var center = this.center;
							//map.panTo(center)
							map.setZoom(14);
							$('div#ward-legend').css('display', 'block');
							

							//Draw the precincts for the shape the marker is in
							//but only do this if the map moves
							
							if(map.getCenter() !== this.center){
								removePrecincts();
								
								allShapes.forEach(function(shape){
									if(google.maps.geometry.poly.containsLocation(center, shape)){
										drawPrecincts(shape);
									}  
								});
							}
							//set the new center at the end so that
							//we can compare the new one to the old one
							map.setCenter(center);

						});

					//marker.setVisible(false);
					allMarkers.push(marker);

					}

					allShapes.push(wardDesign);
					wardDesign.setMap(map);

					}



				});
					//the last thing we do is paint the results on the wards/precincts
					updateResults();

			});
		}

		function drawPrecincts(wardDesign){
			$.getJSON("/getPrecincts/" + wardDesign.id, function(data){
				if(data){
					(data.precincts).forEach(function(precinct){
						var precinctCoords = [];

						//split the boundaries into lat long pairs that will be fed into our function
						if(precinct.Boundaries){
								precinct.Boundaries = precinct.Boundaries.split(/[()]+/).filter(function(e) { return e; });

							//push every latlng pair in the polygon to the google maps initiator function
								for (i=1; i<precinct.Boundaries.length; i+=2){
									precinctCoords.push(getLatLngFromString(precinct.Boundaries[i]));
								}


							// Do I need the center of the precinct? 
							// (Will come in handy on re-focus)
							var bounds = new google.maps.LatLngBounds();

							for(i=0; i<precinctCoords.length; i++){
								bounds.extend(precinctCoords[i]);
							}

							// Styling & Controls
							precinctDesign = new google.maps.Polygon({
							    paths: precinctCoords,
							    //draggable: true, // turn off if it gets annoying
							    //editable: true,
							    strokeColor: '#FF0000',
							    strokeOpacity: 0.8,
							    strokeWeight: 2,
							    fillColor: '#FF0000',
							    //fillColor: '#FF0000',
							    fillOpacity: 0.35
							});

							//add the following properties to precinctDesign
							precinctDesign['center'] = bounds.getCenter();
							precinctDesign['name'] = precinct.Precinct_Num; 
							precinctDesign['id'] = precinct.idPrecinct;

							console.log(precinctDesign);


							//add click listener to precinct
							google.maps.event.addListener(precinctDesign, 'click', function(event){
								var precinctLevel = true;
								//i'll need to get the results for the precinct 
								//console.log(ward_results);
								var precinctID = this.id;
								var precinctName = this.name;
								var raceID = $('select#sRaces option:selected').val();
								$.getJSON("/getResults_precinctView/" + precinctID +"/" + raceID, function(data){
									updateCandidateList(data.precinct_results, wardDesign.name + ' Precinct ' + precinctName, true);
								});

								//i'll need to re-center the map on the precinct
								//set the new center at the end so that
							//we can compare the new one to the old one
							map.setCenter(this.center);
							});




							allPrecincts.push(precinctDesign);
							precinctDesign.setMap(map);

						}
					});

						//so if we get back precinct data,
						//update the race results to show ward totals
						//but we only need to do this if it's mayor races selected
						var selected = $('select#sRaces option:selected').text();

						if (selected.indexOf("Minneapolis") >= 0){
							var wardID = wardDesign.id;
							var raceID = $('select#sRaces option:selected').val();
							//
							$.getJSON("/getResults_wardView/" + wardID +"/" + raceID, function(data){
								updateCandidateList(data.ward_results, wardDesign.name, false);
							});
						} else {
							console.log("getting city council race data...");
						}
				};

			});
		}

		function removePrecincts(){
			for (var i=0; i<allPrecincts.length; i++){
				allPrecincts[i].setMap(null);
				//allMarkers[i].setMap(null);
			}

			//empty the allShapes array
			allPrecincts = [];
		}

		//first clear all the shapes on the map
		function removeWards(){
			for (var i=0; i<allShapes.length; i++){
				allShapes[i].setMap(null);
				allMarkers[i].setMap(null);
			}

			allShapes = [];
			allMarkes = [];
		}

		//updates candidates when it's done
		function updateRaces(){
			var selected = $('select#sYears').val();
			
			$.getJSON("/getRaces/" + selected, function(data){

				//clean out the dropdown menu
				$('select#sRaces').children().remove().end();

					
				//populate dropdown menu from returned data
				//do the city-wide races first
				$.each(data.races, function(i, value){
					if(value.Location === 'Minneapolis'){
						$('select#sRaces').append($('<option>').text(value.Name + ' ' + value.Location + ' ').attr('value', value.idRace));
					}
				});

		
				//add add a divider bar to the last item in the all-city category
				//$('select#sRaces option:first-child').css('padding-top', '10px');
				//$('select#sRaces').append($('<option>').text('___________________________________').attr('disabled', 'disabled'));

				//add an "all city council races option"
				$('select#sRaces').append($('<option>').text("All City Council").attr('value', '0').css('font-weight', 'bold'));
			
				//add the city council races
				$.each(data.races, function(i, value){
					if(value.Location !== 'Minneapolis')
						$('select#sRaces').append($('<option>').text(value.Name + ' ' + value.Location + ' ').attr('value', value.idRace));
				});

				//set the first one to selected
				//$('select#sraces :nth-child(0)').prop('selected', true);

				//update the candidate list
				updateCandidates(true, false);

			});
		}


		//calls draw wards when it's completed
		function updateCandidates(){
			var selected = $('select#sRaces').val();
			$.getJSON("/getCandidates/" + selected, function(data){
				$('select#sCandidates').children().remove().end();
				//In the first spot, add an "All candidates"
				$('select#sCandidates').append($('<option>').text("All").attr('value', '0'));				

				//populate dropdown menu from retrieved data
				$.each(data.candidates, function(i, value){
					$('select#sCandidates').append($('<option>').text(value.First + ' ' + value.Last).attr('value', value.idCandidate));
				});
			
				drawWards();
			})
		}

		function updateCandidateList(candidates, location, precinctLevel){
			$('ul.list').empty();
			$('span#location').text(location);
			console.log(candidates);
			var candidatesLocal;
			if(precinctLevel){
				candidatesLocal = candidates[0];
			} else {
				candidatesLocal = candidates[1];
			}
			candidatesLocal.forEach(function(candidate){
					if(candidate.Sum_RC_First_Place_Votes){
						//this is the box for people who ran with ranked choice voting
						$('ul.list').append('<li id=' + candidate.idCandidate+ '><div class = "candidate-info" id='+  candidate.idCandidate+'><div class="row"><div class="col-xs-2"><div class = "candidate-color"></div></div><div class="col-xs-10"><h3 class="name">'+candidate.First + ' ' + candidate.Last + '</h3></div></div><div class="row"><div class="col-xs-12"><div class="party">' + candidate.Party + '</div></div><div class="col-xs-12"><div class="vote-totals">First place votes: <span class="formatted-votes"> ' + candidate.Sum_RC_First_Place_Votes  +'</span><br> Second place votes: <span class="formatted-votes">' + candidate.Sum_RC_Second_Place_Votes+ '</span><br> Third place votes: <span class="formatted-votes">' + candidate.Sum_RC_Third_Place_Votes + '  </span></div></div></div><div class="row"><div class="col-xs-12"><div class="learn-more">Learn more +</div></div></row></li>');
					} else {
						console.log('trying to add FPTP people');
						//this is the box for people who ran with FPTP voting
						$('ul.list').append('<li id=' + candidate.idCandidate+ '><div class = "candidate-info" id='+  candidate.idCandidate+'><div class="row"><div class="col-xs-2"><div class = "candidate-color"></div></div><div class="col-xs-10"><h3 class="name">'+candidate.First + ' ' + candidate.Last + '</h3></div></div><div class="row"><div class="col-xs-12"><div class="party">' + candidate.Party + '</div></div><div class="col-xs-12"><div class="vote-totals">Votes: <span class="formatted-votes"> ' + candidate.FPTP_Votes_Sum  +'</span></div></div></div><div class="row"><div class="col-xs-12"><div class="learn-more">Learn more +</div></div></row></li>');


					//this is the box for people who ran with fptp voting

					}				
			});
		}


		function updateResults(wardLevel, precinctLevel){
			//console.log('updateResults called');
			var selected = $('select#sRaces option:selected').val();
			var candidateColors = ['blue', 'yellow', 'orange', 'purple', 'teal'];

			//only call this function if we are doing wardLevel
			$.getJSON("/getResults_allWards/" + selected, function(data){
				//console.log(data);

				//remove the candidates from the list
				$('ul.list').empty();

				//add the top eight candidates to the results list
				//and assign them a color

				//temp variable to run this even though i don't have mayoral results
				//my guess is this nonsense will work itself out once I get mayoral results
				var results
				if(data.results[1].length > 0){
					results = data.results[1];
				} else {
					results = data.results[0];
				}
				//console.log(data.results[0]);
				results.forEach(function(candidate){
					//console.log(candidate);
					if(candidate.RC_First_Place_Votes){
						//this is the box for people who ran with ranked choice voting
						$('ul.list').append('<li id=' + candidate.idCandidate+ '><div class = "candidate-info" id='+  candidate.idCandidate+'><div class="row"><div class="col-xs-2"><div class = "candidate-color"></div></div><div class="col-xs-10"><h3 class="name">'+candidate.First + ' ' + candidate.Last + '</h3></div></div><div class="row"><div class="col-xs-12"><div class="party">' + candidate.Party + '</div></div><div class="col-xs-12"><div class="vote-totals">First place votes: <span class="formatted-votes"> ' + candidate.RC_First_Place_Votes  +'</span><br> Second place votes: <span class="formatted-votes">' + candidate.RC_Second_Place_Votes+ '</span><br> Third place votes: <span class="formatted-votes">' + candidate.RC_Third_Place_Votes + '  </span></div></div></div><div class="row"><div class="col-xs-12"><div class="learn-more">Learn more +</div></div></row></li>');
					} else {
						console.log('trying to add FPTP people');
						//this is the box for people who ran with FPTP voting
						$('ul.list').append('<li id=' + candidate.idCandidate+ '><div class = "candidate-info" id='+  candidate.idCandidate+'><div class="row"><div class="col-xs-2"><div class = "candidate-color"></div></div><div class="col-xs-10"><h3 class="name">'+candidate.First + ' ' + candidate.Last + '</h3></div></div><div class="row"><div class="col-xs-12"><div class="party">' + candidate.Party + '</div></div><div class="col-xs-12"><div class="vote-totals">Votes: <span class="formatted-votes"> ' + candidate.FPTP_Votes_Sum  +'</span></div></div></div><div class="row"><div class="col-xs-12"><div class="learn-more">Learn more +</div></div></row></li>');


					//this is the box for people who ran with fptp voting

					}
				})

				//give color to the wards
				allShapes.forEach(function(ward){
					ward.setOptions({
						fillColor:'green',
						strokeColor: '#FF0000',
						strokeOpacity: 0.8,
						strokeWeight: 2,
						fillColor: '#FF0000',
						fillOpacity: 0.35
					});
				})
			})
		}

		function pinSymbol(color) {
			return {
				path: 'M 0,0 C -2,-20 -10,-22 -10,-30 A 10,10 0 1,1 10,-30 C 10,-22 2,-20 0,0 z',
				fillColor: color,
				fillOpacity: 0,
				strokeColor: '#000',
				strokeWeight: 0,
				scale: 1,
					labelOrigin: new google.maps.Point(0, -29)
			};
		}


	script(async, defer, src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCiT0h95IpSJ4N3YNhyFnEcEHrv4ruz4SY&callback=initMap")